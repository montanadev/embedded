#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include "time.h"
#include <esp_log.h>
#include "nvs_flash.h"
#include "nvs.h"
#include <Arduino.h>

static const uint8_t datadog[] = {0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x40,
                                  0x1f, 0xbc, 0x00, 0x00, 0x07, 0xfc, 0x00, 0xb8, 0x3f, 0xbe, 0x00, 0x00, 0x1f, 0xfe,
                                  0x03, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x3f, 0xf7, 0x1f, 0xff, 0xff, 0x9f, 0x00, 0x00,
                                  0x3f, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x80, 0x00, 0x7f, 0xfb, 0xff, 0xff, 0xfe, 0xcf,
                                  0x80, 0x00, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0x47, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff,
                                  0xff, 0x81, 0x80, 0x00, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0xfd,
                                  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
                                  0x7f, 0xfc, 0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0x08,
                                  0x00, 0x00, 0x1f, 0xfc, 0xff, 0x87, 0xff, 0x08, 0x00, 0x00, 0x0f, 0xf8, 0xff, 0x07,
                                  0xff, 0x88, 0x00, 0x00, 0x07, 0xf0, 0xfe, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xc1,
                                  0xfe, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x01, 0x03, 0xfe, 0x07, 0xff, 0xfc, 0x00, 0x00,
                                  0x01, 0xff, 0xff, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
                                  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff,
                                  0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x81, 0xc0, 0x00, 0x00, 0xff,
                                  0xff, 0xff, 0xfe, 0x01, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xc0, 0x00,
                                  0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc7,
                                  0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xfe, 0xff,
                                  0xff, 0xef, 0x80, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xff, 0xdf, 0x80, 0x1c, 0x00, 0x03,
                                  0xff, 0xcf, 0xff, 0x8c, 0x07, 0xfc, 0x00, 0x03, 0xff, 0xe3, 0xff, 0x01, 0xff, 0xfc,
                                  0x00, 0x01, 0xff, 0xf8, 0x78, 0x7f, 0xff, 0xfc, 0x00, 0x01, 0xff, 0x00, 0x00, 0xff,
                                  0xff, 0xfc, 0x00, 0x01, 0xff, 0x1f, 0x83, 0xff, 0xff, 0xec, 0x00, 0x01, 0xff, 0x3f,
                                  0xff, 0xff, 0xff, 0xee, 0x00, 0x01, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xce, 0x00, 0x03,
                                  0xff, 0xbf, 0xff, 0xff, 0xff, 0x8e, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xff, 0x7f, 0x86,
                                  0x00, 0x07, 0xff, 0x9f, 0xff, 0xff, 0x3f, 0x06, 0x00, 0x0f, 0xff, 0x9f, 0xff, 0xfe,
                                  0x0f, 0x06, 0x00, 0x3f, 0xff, 0x9f, 0xff, 0xfc, 0x02, 0x06, 0x00, 0x7f, 0xff, 0x9f,
                                  0xff, 0xf8, 0x00, 0x06, 0x00, 0xe0, 0xff, 0xdf, 0xff, 0xf8, 0x00, 0x06, 0x03, 0xff,
                                  0x9f, 0xdf, 0xff, 0xf0, 0x00, 0x06, 0x07, 0xff, 0xcf, 0xdf, 0xf1, 0xe0, 0x00, 0x06,
                                  0x07, 0xff, 0xe7, 0xcf, 0xe0, 0x00, 0x00, 0x07, 0x0f, 0xff, 0xf3, 0xcf, 0xc0, 0x00,
                                  0x00, 0x07, 0x0f, 0xff, 0xf9, 0xcf, 0xc0, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xf9, 0xcf,
                                  0x80, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xfc, 0xef, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0xff,
                                  0xfc, 0x0e, 0x00, 0x00, 0x1f, 0xfe, 0x0f, 0xff, 0xfc, 0x0e, 0x00, 0x0f, 0xff, 0x80,
                                  0x03, 0xff, 0xfe, 0x06, 0x03, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xfe, 0x06, 0xff, 0xf0,
                                  0x00, 0x00, 0x00, 0xff, 0xfe, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x07,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
                                  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t minidatadog[] = {0x00, 0x03, 0x00, 0x18, 0x46, 0x80, 0x7d, 0xff, 0xc0, 0x7f, 0xff, 0x60, 0xfb,
                                      0xff, 0x00, 0xfb, 0xfe, 0x80, 0x7b, 0x9e, 0x00, 0x07, 0x9f, 0x80, 0x1f, 0xff,
                                      0xc0, 0x1f, 0xff, 0x60, 0x1f, 0xfe, 0x60, 0x0f, 0xff, 0xe0, 0x07, 0xff, 0xce,
                                      0x03, 0xe1, 0xfe, 0x03, 0xbf, 0xfc, 0x07, 0xbf, 0xf9, 0x0f, 0xbf, 0x89, 0x1b,
                                      0xff, 0x81, 0x3e, 0xf8, 0x01, 0x7f, 0x70, 0x01, 0x7f, 0x10, 0x3e, 0x1f, 0x1f,
                                      0x80, 0x1f, 0x00, 0x00, 0x0f, 0x00, 0x00};


const char *ntpServer = "pool.ntp.org";

bool tripped = true;
int option = 0;


// BUTTON_PIN is the pin on the Datadog paw
#define BUTTON_PIN     26
// SCREEN_ADDRESS is normally 0x3D for 128x64, but for these crazy Amazon OLEDs, its 0x3C
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(128, 64, &Wire, -1);

void showClock() {
    while (1) {
        display.clearDisplay();
        display.setTextColor(WHITE);
        display.setTextSize(3);
        display.setFont(NULL);
        display.setCursor(0, 0);

        struct tm timeinfo;
        time_t now;
        time(&now);
        setenv("TZ", "UTC-7", 1);
        tzset();

        localtime_r(&now, &timeinfo);

        if (timeinfo.tm_hour > 12) {
            timeinfo.tm_hour -= 12;
        }

        String hour = "%d";
        if (timeinfo.tm_hour < 10) {
            hour = "0%d";
        }
        String min = "%d";
        if (timeinfo.tm_min < 10) {
            min = "0%d";
        }

        char code_without_blink[40];
        sprintf(code_without_blink, "%s:%s", hour.c_str(), min.c_str());
        char code_with_blink[40];
        sprintf(code_with_blink, "%s %s", hour.c_str(), min.c_str());

        display.printf(code_with_blink, timeinfo.tm_hour, timeinfo.tm_min);
        display.display();
        sleep(1);
        display.setCursor(0, 0);
        display.clearDisplay();
        display.printf(code_without_blink, timeinfo.tm_hour, timeinfo.tm_min);
        display.display();
        sleep(1);
    }
}

extern "C" void app_main() {
    initArduino();

    ESP_LOGI("app_main", "Initializing nvs memory...");
    esp_err_t err = nvs_flash_init();
    if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        // NVS partition was truncated and needs to be erased
        // Retry nvs_flash_init
        ESP_ERROR_CHECK(nvs_flash_erase());
        err = nvs_flash_init();
    }
    ESP_ERROR_CHECK(err);
    ESP_LOGI("app_main", "Initializing nvs memory...done");

    ESP_LOGI("app_main", "Initializing screen...");
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        ESP_LOGI("app_main", "SSD1306 allocation failed");
        for (;;); // Don't proceed, loop forever
    }
    ESP_LOGI("app_main", "Initializing screen...done");

    // initialize the push pin
    pinMode(BUTTON_PIN, INPUT);

    // draw the loading image
    display.clearDisplay();
    display.setTextColor(WHITE);
    display.drawBitmap(0, 0, datadog, 64, 64, 1);
    display.display();
    sleep(2);

    showClock();
}


void showSettings() {
    if (tripped) {
        display.clearDisplay();
        display.setTextColor(WHITE);
        display.drawBitmap(104, 0, minidatadog, 24, 24, 1);
        display.setTextSize(2);
        display.setFont(NULL);
        display.setCursor(0, 0);
        display.println("Settings");
        display.drawLine(0, 15, 104, 15, 1);
        display.setTextSize(1);

        display.setCursor(0, 17);
        if (option == 0) {
            display.setTextColor(BLACK, WHITE);
        } else {
            display.setTextColor(WHITE);
        }
        display.println("Set clock");

        display.setCursor(0, 27);
        if (option == 1) {
            display.setTextColor(BLACK, WHITE);
        } else {
            display.setTextColor(WHITE);
        }
        display.println("Enable WiFi");
        display.display();
    }

    // read the state of the pushbutton value:
    int buttonState = digitalRead(BUTTON_PIN);

    // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
    if (buttonState == HIGH && !tripped) {
        tripped = true;

        Serial.printf("%d %d\n", tripped, option);
        sleep(1);
        if (digitalRead(BUTTON_PIN) == HIGH) {
            // longpress
            Serial.print("Longpress detected \n");
        } else {
            option = (option + 1) % 2;
        }
    } else if (buttonState == LOW) {
        if (tripped) {
            tripped = false;
        }
    }
}

